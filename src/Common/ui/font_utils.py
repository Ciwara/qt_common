#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Module utilitaire pour la gestion optimis√©e des polices selon le syst√®me d'exploitation.
√âvite les warnings Qt et am√©liore les performances.
"""

import platform
from PyQt5.QtGui import QFont, QFontDatabase
from PyQt5.QtWidgets import QApplication


class FontManager:
    """Gestionnaire de polices optimis√© pour √©viter les warnings Qt"""
    
    _system_fonts = None
    _preferred_font_family = None
    
    @classmethod
    def get_system_info(cls):
        """Retourne les informations syst√®me pour le choix des polices"""
        return {
            'system': platform.system(),
            'version': platform.version(),
            'machine': platform.machine()
        }
    
    @classmethod
    def get_available_fonts(cls):
        """Retourne la liste des polices disponibles sur le syst√®me"""
        if cls._system_fonts is None:
            font_db = QFontDatabase()
            cls._system_fonts = font_db.families()
        return cls._system_fonts
    
    @classmethod
    def get_preferred_font_family(cls):
        """Retourne la famille de police pr√©f√©r√©e selon le syst√®me"""
        if cls._preferred_font_family is not None:
            return cls._preferred_font_family
            
        system = platform.system()
        available_fonts = cls.get_available_fonts()
        
        # D√©finir les priorit√©s de polices selon le syst√®me
        if system == "Darwin":  # macOS
            priority_fonts = [
                "Helvetica Neue",
                "Helvetica",
                "Arial"
            ]
        elif system == "Windows":
            priority_fonts = [
                "Segoe UI",
                "Calibri",
                "Arial",
                "Tahoma"
            ]
        else:  # Linux et autres
            priority_fonts = [
                "Ubuntu",
                "Noto Sans",
                "DejaVu Sans",
                "Liberation Sans",
                "Arial",
                "Helvetica"
            ]
        
        # Trouver la premi√®re police disponible
        for font in priority_fonts:
            if font in available_fonts:
                cls._preferred_font_family = font
                return font
        
        # Fallback vers la police par d√©faut du syst√®me
        cls._preferred_font_family = "sans-serif"
        return "sans-serif"
    
    @classmethod
    def get_font_fallback_string(cls):
        """Retourne une cha√Æne CSS avec les polices de fallback optimis√©es"""
        system = platform.system()
        
        if system == "Darwin":  # macOS
            return '"Helvetica Neue", "Helvetica", "Arial", sans-serif'
        elif system == "Windows":
            return '"Segoe UI", "Calibri", "Arial", "Tahoma", sans-serif'
        else:  # Linux
            return '"Ubuntu", "Noto Sans", "DejaVu Sans", "Liberation Sans", "Arial", sans-serif'
    
    @classmethod
    def create_optimized_font(cls, size=10, weight=QFont.Normal):
        """Cr√©e une police optimis√©e pour le syst√®me actuel"""
        font_family = cls.get_preferred_font_family()
        return QFont(font_family, size, weight)
    
    @classmethod
    def get_css_font_family(cls):
        """Retourne la d√©claration CSS font-family optimis√©e"""
        return f'font-family: {cls.get_font_fallback_string()};'


def get_system_font():
    """Raccourci pour obtenir la police syst√®me optimale"""
    return FontManager.get_preferred_font_family()


def get_css_font_fallback():
    """Raccourci pour obtenir la cha√Æne CSS des polices de fallback"""
    return FontManager.get_font_fallback_string()


def create_system_font(size=10, weight=QFont.Normal):
    """Raccourci pour cr√©er une police syst√®me optimis√©e"""
    return FontManager.create_optimized_font(size, weight)


def optimize_css_fonts(css_content):
    """Optimise le CSS en rempla√ßant les polices par celles adapt√©es au syst√®me"""
    import re
    
    # Remplacer toutes les occurrences de font-family avec Segoe UI
    segoe_pattern = r'font-family:\s*"Segoe\s+UI"[^;]*;'
    optimized_font_family = FontManager.get_css_font_family()
    
    # Remplacer les patterns complets
    css_content = re.sub(segoe_pattern, optimized_font_family, css_content)
    
    return css_content


def log_font_info():
    """Affiche les informations de police pour debug"""
    print(f"üñ•Ô∏è  Syst√®me: {platform.system()}")
    print(f"üìù Police pr√©f√©r√©e: {FontManager.get_preferred_font_family()}")
    print(f"üî§ Fallback CSS: {FontManager.get_font_fallback_string()}")
    print(f"üìä Polices disponibles: {len(FontManager.get_available_fonts())}")


# Test des fonctions si ex√©cut√© directement
if __name__ == "__main__":
    app = QApplication([])
    log_font_info()
    
    # Test de cr√©ation de police
    test_font = create_system_font(12, QFont.Bold)
    print(f"üß™ Police de test cr√©√©e: {test_font.family()} - {test_font.pointSize()}pt")
    
    app.quit() 