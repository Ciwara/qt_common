#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
D√©monstration Simple du module Common
Version simplifi√©e et fonctionnelle de la d√©monstration
"""

import sys
import os
from pathlib import Path

# Ajout du r√©pertoire src au PYTHONPATH
src_path = Path(__file__).parent / 'src'
sys.path.insert(0, str(src_path))

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, 
    QPushButton, QLabel, QTextEdit, QGroupBox, QFormLayout,
    QMessageBox
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

# Test d'import du module Common
try:
    # Import des composants principaux
    from Common.cstatic import logger, CConstants
    from Common.models import Settings, Organization, Owner, dbh
    
    # Import des widgets modernes s'ils sont disponibles
    try:
        from Common.ui.modern_widgets import (
            ModernButton, ModernLineEdit, ModernComboBox, ModernGroupBox,
            ModernCard, LoadingSpinner, StatusIndicator
        )
        MODERN_WIDGETS_AVAILABLE = True
    except ImportError:
        MODERN_WIDGETS_AVAILABLE = False
    
    COMMON_AVAILABLE = True
    print("‚úÖ Module Common import√© avec succ√®s")
    logger.info("Module Common import√© avec succ√®s pour la d√©monstration")
    
except ImportError as e:
    print(f"‚ùå Erreur d'import du module Common: {e}")
    COMMON_AVAILABLE = False

class CommonDemoSimple(QMainWindow):
    """D√©monstration simple du module Common"""
    
    def __init__(self):
        super().__init__()
        self.init_ui()
        
        if COMMON_AVAILABLE:
            self.apply_theme()
            self.update_database_info()
    
    def init_ui(self):
        """Initialise l'interface utilisateur"""
        self.setWindowTitle("D√©monstration Simple - Module Common")
        self.setMinimumSize(900, 600)
        
        # Widget central
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Layout principal
        main_layout = QVBoxLayout(central_widget)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 20, 20, 20)
        
        # Titre
        title_label = QLabel("üîß D√©monstration du Module Common")
        title_label.setFont(QFont("Arial", 18, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)
        
        # Informations syst√®me
        self.create_system_info(main_layout)
        
        # Section base de donn√©es
        self.create_database_section(main_layout)
        
        # Section th√®mes et styles
        if COMMON_AVAILABLE:
            self.create_themes_section(main_layout)
        
        # Section widgets modernes
        if COMMON_AVAILABLE and MODERN_WIDGETS_AVAILABLE:
            self.create_modern_widgets_section(main_layout)
        
        # Section tests
        self.create_tests_section(main_layout)
        
        # Zone de logs
        self.create_logs_section(main_layout)
        
        # Barre de statut
        self.statusBar().showMessage("Module Common - Pr√™t")
    
    def create_system_info(self, parent_layout):
        """Cr√©e la section d'informations syst√®me"""
        group = QGroupBox("üìä Informations Syst√®me")
        layout = QFormLayout(group)
        
        if COMMON_AVAILABLE:
            # Informations du module Common
            layout.addRow("Module Common:", QLabel("‚úÖ Disponible"))
            layout.addRow("Debug mode:", QLabel("‚úÖ Activ√©" if CConstants.DEBUG else "‚ùå D√©sactiv√©"))
            layout.addRow("Base de donn√©es:", QLabel("‚úÖ Connect√©e" if dbh and not dbh.is_closed() else "‚ùå D√©connect√©e"))
            layout.addRow("Widgets modernes:", QLabel("‚úÖ Disponibles" if MODERN_WIDGETS_AVAILABLE else "‚ùå Non disponibles"))
        else:
            layout.addRow("Module Common:", QLabel("‚ùå Non disponible"))
        
        # Informations Python
        layout.addRow("Version Python:", QLabel(f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"))
        layout.addRow("Plateforme:", QLabel(sys.platform))
        
        parent_layout.addWidget(group)
    
    def create_database_section(self, parent_layout):
        """Cr√©e la section de gestion de la base de donn√©es"""
        group = QGroupBox("üóÉÔ∏è Base de Donn√©es")
        layout = QVBoxLayout(group)
        
        # Informations sur la base
        self.db_info_label = QLabel("Chargement...")
        layout.addWidget(self.db_info_label)
        
        # Boutons de test
        buttons_layout = QHBoxLayout()
        
        test_db_btn = QPushButton("üîç Tester Connexion")
        test_db_btn.clicked.connect(self.test_database)
        buttons_layout.addWidget(test_db_btn)
        
        if COMMON_AVAILABLE:
            show_models_btn = QPushButton("üìä Afficher Mod√®les")
            show_models_btn.clicked.connect(self.show_models)
            buttons_layout.addWidget(show_models_btn)
            
            settings_btn = QPushButton("‚öôÔ∏è Param√®tres")
            settings_btn.clicked.connect(self.show_settings)
            buttons_layout.addWidget(settings_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        parent_layout.addWidget(group)
    
    def create_themes_section(self, parent_layout):
        """Cr√©e la section de gestion des th√®mes"""
        group = QGroupBox("üé® Th√®mes et Styles")
        layout = QVBoxLayout(group)
        
        info_label = QLabel("S√©lectionnez un th√®me pour voir les changements:")
        layout.addWidget(info_label)
        
        # Boutons de th√®mes
        themes_layout = QHBoxLayout()
        
        try:
            theme_manager = get_theme_manager()
            themes = theme_manager.get_available_themes()
            for theme_key, theme_name in themes.items():
                if MODERN_WIDGETS_AVAILABLE:
                    btn = ModernButton(theme_name, button_type="default")
                else:
                    btn = QPushButton(theme_name)
                btn.clicked.connect(lambda checked, key=theme_key: self.change_theme(key))
                themes_layout.addWidget(btn)
        except Exception as e:
            error_label = QLabel(f"Erreur lors du chargement des th√®mes: {e}")
            layout.addWidget(error_label)
        
        themes_layout.addStretch()
        layout.addLayout(themes_layout)
        
        parent_layout.addWidget(group)
    
    def create_modern_widgets_section(self, parent_layout):
        """Cr√©e la section des widgets modernes"""
        group = QGroupBox("üéØ Widgets Modernes")
        layout = QVBoxLayout(group)
        
        # Boutons modernes
        buttons_layout = QHBoxLayout()
        buttons_layout.addWidget(ModernButton("Primaire", button_type="primary"))
        buttons_layout.addWidget(ModernButton("Succ√®s", button_type="success"))
        buttons_layout.addWidget(ModernButton("Danger", button_type="danger"))
        buttons_layout.addWidget(ModernButton("D√©faut", button_type="default"))
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        # Champs de saisie
        layout.addWidget(ModernLineEdit("Exemple de champ moderne"))
        
        # ComboBox
        combo = ModernComboBox()
        combo.addItems(["Option 1", "Option 2", "Option 3"])
        layout.addWidget(combo)
        
        # Indicateurs de statut
        status_layout = QHBoxLayout()
        status_layout.addWidget(QLabel("Statuts:"))
        status_layout.addWidget(StatusIndicator("active"))
        status_layout.addWidget(StatusIndicator("processing"))
        status_layout.addWidget(StatusIndicator("error"))
        
        spinner = LoadingSpinner(20)
        spinner.start()
        status_layout.addWidget(spinner)
        status_layout.addStretch()
        layout.addLayout(status_layout)
        
        parent_layout.addWidget(group)
    
    def create_tests_section(self, parent_layout):
        """Cr√©e la section de tests"""
        group = QGroupBox("üß™ Tests")
        layout = QHBoxLayout(group)
        
        # Boutons de test
        if COMMON_AVAILABLE:
            log_test_btn = QPushButton("üìù Test Logs")
            log_test_btn.clicked.connect(self.test_logging)
            layout.addWidget(log_test_btn)
            
            notification_btn = QPushButton("üîî Test Notification")
            notification_btn.clicked.connect(self.test_notification)
            layout.addWidget(notification_btn)
            
            error_btn = QPushButton("‚ö†Ô∏è Test Erreur")
            error_btn.clicked.connect(self.test_error)
            layout.addWidget(error_btn)
        else:
            no_test_label = QLabel("Tests non disponibles (module Common manquant)")
            layout.addWidget(no_test_label)
        
        layout.addStretch()
        parent_layout.addWidget(group)
    
    def create_logs_section(self, parent_layout):
        """Cr√©e la section d'affichage des logs"""
        group = QGroupBox("üìã Logs")
        layout = QVBoxLayout(group)
        
        self.logs_text = QTextEdit()
        self.logs_text.setMaximumHeight(150)
        self.logs_text.setFont(QFont("Courier", 10))
        self.logs_text.setPlaceholderText("Les logs et messages s'afficheront ici...")
        layout.addWidget(self.logs_text)
        
        # Boutons de contr√¥le des logs
        logs_buttons = QHBoxLayout()
        
        clear_btn = QPushButton("üóëÔ∏è Effacer")
        clear_btn.clicked.connect(self.logs_text.clear)
        logs_buttons.addWidget(clear_btn)
        
        logs_buttons.addStretch()
        layout.addLayout(logs_buttons)
        
        parent_layout.addWidget(group)
    
    def apply_theme(self):
        """Applique le th√®me actuel"""
        try:
            theme_manager = get_theme_manager()
            theme_manager.apply_theme(theme_manager.get_current_theme())
            self.log_message("‚úÖ Th√®me appliqu√© avec succ√®s")
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors de l'application du th√®me: {e}")
    
    def change_theme(self, theme_key):
        """Change le th√®me de l'application"""
        try:
            theme_manager = get_theme_manager()
            theme_manager.apply_theme(theme_key)
            self.log_message(f"üé® Th√®me chang√© vers: {theme_key}")
            self.statusBar().showMessage(f"Th√®me appliqu√©: {theme_key}")
        except Exception as e:
            self.log_message(f"‚ùå Erreur lors du changement de th√®me: {e}")
    
    def update_database_info(self):
        """Met √† jour les informations de la base de donn√©es"""
        if not COMMON_AVAILABLE:
            self.db_info_label.setText("‚ùå Module Common non disponible")
            return
        
        try:
            if dbh and not dbh.is_closed():
                # Compter les enregistrements
                settings_count = Settings.select().count()
                owners_count = Owner.select().count() if Owner.select().count else 0
                orgs_count = Organization.select().count() if Organization.select().count else 0
                
                info_text = f"""
‚úÖ Base de donn√©es connect√©e
üìä Param√®tres: {settings_count} enregistrement(s)
üë• Propri√©taires: {owners_count} enregistrement(s)
üè¢ Organisations: {orgs_count} enregistrement(s)
"""
                self.db_info_label.setText(info_text.strip())
            else:
                self.db_info_label.setText("‚ùå Base de donn√©es d√©connect√©e")
        except Exception as e:
            self.db_info_label.setText(f"‚ùå Erreur: {e}")
    
    def test_database(self):
        """Teste la connexion √† la base de donn√©es"""
        if not COMMON_AVAILABLE:
            QMessageBox.warning(self, "Test impossible", "Module Common non disponible")
            return
        
        try:
            if dbh and not dbh.is_closed():
                # Test simple de requ√™te
                count = Settings.select().count()
                QMessageBox.information(self, "Test de Connexion", 
                                      f"‚úÖ Connexion OK!\nNombre de param√®tres: {count}")
                self.log_message("‚úÖ Test de base de donn√©es r√©ussi")
            else:
                QMessageBox.warning(self, "Test de Connexion", 
                                  "‚ùå Base de donn√©es non connect√©e")
                self.log_message("‚ùå Test de base de donn√©es √©chou√©")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"‚ùå Erreur lors du test:\n{e}")
            self.log_message(f"‚ùå Erreur test DB: {e}")
    
    def show_models(self):
        """Affiche les informations sur les mod√®les"""
        if not COMMON_AVAILABLE:
            return
        
        try:
            models_info = f"""
üìä Mod√®les disponibles dans le module Common:

‚Ä¢ Settings (Param√®tres): {Settings.select().count()} enregistrement(s)
‚Ä¢ Owner (Propri√©taires): {Owner.select().count()} enregistrement(s)
‚Ä¢ Organization (Organisations): {Organization.select().count()} enregistrement(s)

üìÅ Base de donn√©es: database.db
üîß ORM: Peewee
"""
            QMessageBox.information(self, "Mod√®les de Donn√©es", models_info)
            self.log_message("üìä Informations des mod√®les affich√©es")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la r√©cup√©ration:\n{e}")
            self.log_message(f"‚ùå Erreur mod√®les: {e}")
    
    def show_settings(self):
        """Affiche les param√®tres actuels"""
        if not COMMON_AVAILABLE:
            return
        
        try:
            settings = Settings.get_or_create(id=1)[0]
            settings_info = f"""
‚öôÔ∏è Param√®tres actuels:

‚Ä¢ Th√®me: {settings.theme}
‚Ä¢ Login requis: {'Oui' if settings.auth_required else 'Non'}
‚Ä¢ Barre d'outils: {'Visible' if settings.toolbar else 'Cach√©e'}
‚Ä¢ Position barre: {settings.toolbar_position}
‚Ä¢ URL: {settings.url}
‚Ä¢ Devise: {settings.devise}
"""
            QMessageBox.information(self, "Param√®tres", settings_info)
            self.log_message("‚öôÔ∏è Param√®tres affich√©s")
        except Exception as e:
            QMessageBox.critical(self, "Erreur", f"Erreur lors de la r√©cup√©ration des param√®tres:\n{e}")
            self.log_message(f"‚ùå Erreur param√®tres: {e}")
    
    def test_logging(self):
        """Teste le syst√®me de logs"""
        if not COMMON_AVAILABLE:
            self.log_message("‚ùå Logs Common non disponibles")
            return
        
        try:
            logger.debug("Test de log DEBUG depuis la d√©monstration")
            logger.info("Test de log INFO depuis la d√©monstration")
            logger.warning("Test de log WARNING depuis la d√©monstration")
            logger.error("Test de log ERROR depuis la d√©monstration")
            
            self.log_message("üìù Logs de test envoy√©s (v√©rifiez la console/fichier de log)")
            QMessageBox.information(self, "Test Logs", 
                                  "‚úÖ Logs de test envoy√©s!\nV√©rifiez la console ou le fichier de logs.")
        except Exception as e:
            self.log_message(f"‚ùå Erreur test logs: {e}")
    
    def test_notification(self):
        """Teste les notifications"""
        QMessageBox.information(self, "Test Notification", 
                              "üîî Ceci est un test de notification!\nLe syst√®me de notifications fonctionne.")
        self.log_message("üîî Test de notification r√©ussi")
    
    def test_error(self):
        """Teste la gestion d'erreur"""
        try:
            # D√©clencher une erreur volontairement
            raise ValueError("Ceci est une erreur de test volontaire")
        except Exception as e:
            QMessageBox.critical(self, "Test d'Erreur", 
                               f"‚ö†Ô∏è Erreur captur√©e avec succ√®s:\n{e}")
            self.log_message(f"‚ö†Ô∏è Test d'erreur: {e}")
    
    def log_message(self, message):
        """Ajoute un message dans la zone de logs"""
        self.logs_text.append(f"[{self.logs_text.document().lineCount():03d}] {message}")
        
        # Faire d√©filer vers le bas
        cursor = self.logs_text.textCursor()
        cursor.movePosition(cursor.End)
        self.logs_text.setTextCursor(cursor)

def main():
    """Fonction principale"""
    print("üöÄ === D√©monstration Simple du Module Common ===")
    
    app = QApplication(sys.argv)
    
    # Configuration de l'application
    app.setApplicationName("Common Demo Simple")
    app.setApplicationVersion("1.0")
    app.setOrganizationName("Module Common")
    
    print(f"üì¶ Module Common disponible: {'Oui' if COMMON_AVAILABLE else 'Non'}")
    print(f"üé® Widgets modernes disponibles: {'Oui' if MODERN_WIDGETS_AVAILABLE else 'Non'}")
    
    # Fen√™tre principale
    window = CommonDemoSimple()
    window.show()
    
    print("üñ•Ô∏è Fen√™tre de d√©monstration ouverte!")
    print("üëâ Testez les diff√©rentes fonctionnalit√©s avec les boutons")
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main() 